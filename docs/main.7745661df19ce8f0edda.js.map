{"version":3,"sources":["./src/app/app-routing.module.ts","./src/app/sanitizer/sanitizer.component.ts","./src/app/sanitizer/sanitizer.component.html","./src/app/app.component.ts","./src/app/app.component.html","./src/app/app.module.ts","./src/main.ts","./$_lazy_route_resource lazy namespace object"],"names":["routes","AppRoutingModule","forRoot","SanitizerComponent","sanitizer","editorCode","sanitizedCode","sanitizedRender","tests","log","console","dir","clean","this","sanitize","HTML","bypassSecurityTrustHtml","update","e","target","textContent","AppComponent","title","AppModule","bootstrapModule","catch","err","error","webpackEmptyAsyncContext","req","Promise","resolve","then","Error","code","keys","module","exports","id"],"mappings":"iLAGA,MAAMA,EAAiB,GAMhB,Y,MAAMC,G,8BAAAA,I,oDAAAA,IAAgB,SAHlB,CAAC,IAAaC,QAAQF,IACrB,O,GAEL,GCDA,Q,MAAMG,EAEX,YAAoBC,GAAA,KAAAA,YAGpB,KAAAC,WAAa,GACb,KAAAC,cAAgB,GAChB,KAAAC,gBAA4B,GAE5B,KAAAC,MAAQ,CACN,mFAKA,sFAKA,uEAIA,2EAMF,KAAAC,IAAMC,QAAQC,IAKd,KAAAC,MAAQ,KACNC,KAAKP,cAAgBO,KAAKT,UAAUU,SAAS,IAAgBC,KAAMF,KAAKR,aAAe,GACvFQ,KAAKN,gBAAkBM,KAAKT,UAAUY,wBAAwBH,KAAKP,gBAAkB,IAGvF,KAAAW,OAAUC,GAAaL,KAAKR,WAAca,EAAEC,OAAuBC,aAAe,GARlF,a,6CAhCWjB,GAAkB,Y,uBAAlBA,EAAkB,qMCR/B,sDACA,gBAAgC,+BAAQ,EAAAc,OAAA,KAAsD,OAC9F,aACA,8BACA,gBAAoB,QAAiB,OACrC,aACA,gCACA,gBACA,aACA,cAEA,oBAAQ,oDAA4B,KAAI,uBAAW,OACnD,oBAAQ,oDAA4B,KAAI,uBAAW,OACnD,oBAAQ,oDAA4B,KAAI,uBAAW,OACnD,oBAAQ,oDAA4B,KAAI,uBAAW,OAEnD,oBAAQ,+BAAS,EAAAL,UAAS,yBAAa,Q,MAflC,yCAGe,8BAGA,mD,6LDCb,GEDA,Q,MAAMS,EALb,cAME,KAAAC,MAAQ,qB,6CADGD,I,uBAAAA,EAAY,qECPzB,wBACA,0B,oCDMO,GEcA,Q,MAAME,G,8BAAAA,EAAS,WAFR,K,oDAEDA,IAAS,UAHT,GAAE,SAJJ,CACP,IACA,M,GAKG,GCdL,cAGF,MAAyBC,gBAAgB,GACtCC,MAAMC,GAAOhB,QAAQiB,MAAMD,K,mBCX9B,SAASE,EAAyBC,GAGjC,OAAOC,QAAQC,UAAUC,KAAK,WAC7B,IAAId,EAAI,IAAIe,MAAM,uBAAyBJ,EAAM,KAEjD,MADAX,EAAEgB,KAAO,mBACHhB,IAGRU,EAAyBO,KAAO,WAAa,MAAO,IACpDP,EAAyBG,QAAUH,EACnCQ,EAAOC,QAAUT,EACjBA,EAAyBU,GAAK,S","file":"main.7745661df19ce8f0edda.js","sourcesContent":["import { NgModule } from '@angular/core';\nimport { Routes, RouterModule } from '@angular/router';\n\nconst routes: Routes = [];\n\n@NgModule({\n  imports: [RouterModule.forRoot(routes)],\n  exports: [RouterModule]\n})\nexport class AppRoutingModule { }\n","import {Component, OnInit, SecurityContext} from '@angular/core';\nimport {DomSanitizer, SafeHtml} from '@angular/platform-browser';\n\n@Component({\n  selector: 'app-sanitizer',\n  templateUrl: './sanitizer.component.html',\n  styleUrls: ['./sanitizer.component.scss']\n})\nexport class SanitizerComponent implements OnInit {\n\n  constructor(private sanitizer: DomSanitizer) {\n  }\n\n  editorCode = '';\n  sanitizedCode = '';\n  sanitizedRender: SafeHtml = '';\n\n  tests = [\n    `<p>\n <script>alert('Hello!')</script>\n   {{Tag=Name}}\n   {{Tag=Title}}\n</p>`,\n    `<p>\n <link rel=\"http://malicious-site.org\" />\n {{Tag=Name}}\n {{Tag=Title}}\n</p>`,\n    `<p onclick=\"alert('Hello!')\">\n {{Tag=Name}}\n {{Tag=Title}}\n</p>`,\n    `<p data-handler=\"window.location\">\n {{Tag=Name}}\n {{Tag=Title}}\n</p>`\n  ];\n\n  log = console.dir;\n\n  ngOnInit(): void {\n  }\n\n  clean = () => {\n    this.sanitizedCode = this.sanitizer.sanitize(SecurityContext.HTML, this.editorCode) || '';\n    this.sanitizedRender = this.sanitizer.bypassSecurityTrustHtml(this.sanitizedCode) || '';\n  }\n\n  update = (e: Event) => this.editorCode = (e.target as HTMLElement).textContent || '';\n\n}\n","Source code (you can also edit the text):\n<pre [textContent]=\"editorCode\" (blur)=\"update($event)\" contenteditable=\"true\" class=\"editor\"></pre>\n<hr />\nSanitized Code:\n<pre class=\"editor\">{{sanitizedCode}}</pre>\n<br/>\nSanitized Render:\n<div class=\"editor\" [innerHTML]=\"sanitizedRender\"></div>\n<br />\n<hr/>\n\n<button (click)=\"editorCode = tests[0]\">Test Case 1</button>\n<button (click)=\"editorCode = tests[1]\">Test Case 2</button>\n<button (click)=\"editorCode = tests[2]\">Test Case 3</button>\n<button (click)=\"editorCode = tests[3]\">Test Case 4</button>\n\n<button (click)=\"clean()\">RUN SANITIZER</button>\n","import { Component } from '@angular/core';\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.scss']\n})\nexport class AppComponent {\n  title = 'domsanitizer-test';\n}\n","<app-sanitizer></app-sanitizer>\n<router-outlet></router-outlet>\n","import { BrowserModule } from '@angular/platform-browser';\nimport { NgModule } from '@angular/core';\n\nimport { AppRoutingModule } from './app-routing.module';\nimport { AppComponent } from './app.component';\nimport { SanitizerComponent } from './sanitizer/sanitizer.component';\n// import { WysiwygComponent } from './wysiwyg/wysiwyg.component';\n\n@NgModule({\n  declarations: [\n    AppComponent,\n    SanitizerComponent\n    // WysiwygComponent\n  ],\n  imports: [\n    BrowserModule,\n    AppRoutingModule\n  ],\n  providers: [],\n  bootstrap: [AppComponent]\n})\nexport class AppModule { }\n","import { enableProdMode } from '@angular/core';\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n\nimport { AppModule } from './app/app.module';\nimport { environment } from './environments/environment';\n\nif (environment.production) {\n  enableProdMode();\n}\n\nplatformBrowserDynamic().bootstrapModule(AppModule)\n  .catch(err => console.error(err));\n","function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"zn8P\";"],"sourceRoot":"webpack:///"}